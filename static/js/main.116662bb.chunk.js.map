{"version":3,"sources":["App.js","index.js"],"names":["App","_useState","useState","_useState2","_slicedToArray","item","setItem","_useState3","_useState4","setValue","_useState5","_useState6","discountValue","setDiscount","_useState7","_useState8","resolvedName","setBakedGoodNameValue","_useState9","_useState10","quantityInputValue","setQuantityValue","_useState11","_useState12","resolvedPrice","setResolvedPrice","_useState13","_useState14","materialCostInputValue","setMaterialCostInputValue","_useState15","_useState16","milesInputValue","setMilesInputValue","_useState17","_useState18","hoursInputValue","setHoursInputValue","_useState19","_useState20","hiddenField","setHiddenFieldClass","_useState21","_useState22","hiddenForm","setHiddenFormClass","handleNewCalculationClick","discount","adjustDiscount","price","parseInt","toFixed","quantity","mileage","materialCost","materialCostPer","preProfit","profitPerGood","profit","hourlyRate","preHourlyRate","bakedGoodName","trim","toLowerCase","totalSum","transformedTotalSumWithDicount","newItem","itemName","isSelected","customerOwes","Math","ceil","diaplay","React","createElement","className","Container","fluid","class","Button","onClick","window","location","reload","Card","style","background","Form","DropdownButton","alignRight","title","id","onSelect","selectedGood","console","log","Dropdown","Item","eventKey","Group","controlId","Control","type","placeholder","value","onChange","e","target","Label","selectedDiscount","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.116662bb.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./index.css\";\nimport {Container , Card, Form, Button, Dropdown, DropdownButton} from 'react-bootstrap'  \n\n\nconst App = () => {\n  const [item, setItem] = useState({});\n  const [value, setValue] = useState(\"\");\n  const [discountValue, setDiscount] = useState(\"\")\n  const [resolvedName, setBakedGoodNameValue] = useState(\"\") \n  const [quantityInputValue, setQuantityValue] = useState(\"\")\n  const [resolvedPrice, setResolvedPrice] = useState(\"\")\n  const [materialCostInputValue, setMaterialCostInputValue] = useState(\"\")\n  const [milesInputValue, setMilesInputValue] = useState(\"\")\n  const [hoursInputValue, setHoursInputValue] = useState(\"\")\n  const [hiddenField, setHiddenFieldClass] = useState(\"hidden\")\n  const [hiddenForm, setHiddenFormClass] = useState(\"block\")\n\n  // sets value of the selected baked good from the dropdown\n  const handleSelectGood=(selectedGood)=>{\n    setValue(selectedGood);\n    console.log(selectedGood)\n    if (selectedGood == 'wedding-cake1') {\n      let price = 120\n      let goodName = \"Single-Tiered Wedding Cake\"\n      setResolvedPrice(price)\n      setBakedGoodNameValue(goodName)\n    } else if (selectedGood == 'wedding-cake2') {\n      let price = 220\n      let goodName = \"Double-Tiered Wedding Cake\"\n      setResolvedPrice(price) \n      setBakedGoodNameValue(goodName)\n    } else if (selectedGood == 'wedding-cake3') {\n      let price = 320\n      let goodName = \"Triple-Tiered Wedding Cake\"\n      setResolvedPrice(price)\n      setBakedGoodNameValue(goodName)\n    } else if (selectedGood == 'bday-cake') {\n      let price = 120\n      let goodName = \"Birthday Cake\"\n      setResolvedPrice(price)\n      setBakedGoodNameValue(goodName)\n    } else if (selectedGood == 'cookie') {\n      let price = 2.00\n      let goodName = \"Cookie(s)\"\n      setResolvedPrice(price)\n      setBakedGoodNameValue(goodName)\n    } else if (selectedGood == 'cupcake') {\n      let price = 3.50\n      let goodName = \"Cupcake(s)\"\n      setResolvedPrice(price)\n      setBakedGoodNameValue(goodName)\n    } else if (selectedGood == 'pie') {\n      let price = 28\n      let goodName = \"Pie(s)\"\n      setResolvedPrice(price)\n      setBakedGoodNameValue(goodName)\n    } else if (selectedGood == 'small-pastry') {\n      let price = 3.50\n      let goodName = \"Small Pastry(ies)\"\n      setResolvedPrice(price)\n      setBakedGoodNameValue(goodName)\n    } else if (selectedGood == 'large-pastry') {\n      let price = 5.00\n      let goodName = \"Large Pastry(ies)\"\n      setResolvedPrice(price)\n      setBakedGoodNameValue(goodName)\n    }\n  };\n\n  // sets state for discount dropdown\n  const handleSelectDiscount=(selectedDiscount)=>{\n    setDiscount(selectedDiscount)\n  };\n\n  // reassigns the discount from selection to integer amount\n  function adjustDiscount() {\n    let discount = discountValue\n    if (discount === 'yes') {\n      discount = 0.15\n      setDiscount(discount)\n    } else {\n      setDiscount('')\n    }\n    return discount\n  };\n\n  // add new item to be calculated - need to refactor to clean up crazy variable list\n  const handleNewCalculationClick = () => {\n    const discount = adjustDiscount()\n    const price = parseInt(resolvedPrice).toFixed(2);\n    const quantity = parseInt(quantityInputValue);\n    const mileage = ((3.25 / 25) * milesInputValue).toFixed(2);\n    const rawMaterialCost = parseInt(materialCostInputValue)\n    const materialCost = rawMaterialCost.toFixed(2);\n    const materialCostPer = (materialCost / quantity).toFixed(2);\n    const preProfit = (quantity * price).toFixed(2);\n    const profitPerGood = ((preProfit/quantity) - materialCostPer).toFixed(2);\n    const profit = (preProfit - materialCost - mileage).toFixed(2);\n    const hourlyRate = (profit/hoursInputValue).toFixed(2);\n    const preHourlyRate = (preProfit/hoursInputValue).toFixed(2);\n    const trimmedTitle = resolvedName.trim();\n    const bakedGoodName = trimmedTitle.toLowerCase();\n    const quantityPrice = quantity * price\n    const transformedQuantityPrice = parseInt(quantityPrice)\n    const transformedMileage = parseInt(mileage)\n    const totalSum = (transformedQuantityPrice + transformedMileage)\n    const discountDollar = (totalSum * discount)\n    const transformedTotalSumWithDicount = (totalSum - discountDollar).toFixed(2)\n    // new item \n    const newItem = {\n      itemName: bakedGoodName,\n      quantity: quantity,\n      price: price,\n      isSelected: false,\n      materialCost: materialCost,\n      materialCostPer: materialCostPer,\n      preProfit: preProfit,\n      profitPerGood: profitPerGood,\n      profit: profit,\n      mileage: mileage,\n      customerOwes: Math.ceil(totalSum),\n      hourlyRate: hourlyRate,\n      preHourlyRate: preHourlyRate,\n      discount: transformedTotalSumWithDicount\n    };\n\n    // sets the css for hiding the form after calculation\n    let hiddenField = {\n      diaplay: \"block\" }\n    setItem(newItem);\n    setHiddenFieldClass(hiddenField)\n    setHiddenFormClass(\"hidden\")\n  };\n\n  // reloads the page and clears it all\n  const reloadWindow = () => {\n  window.location.reload();\n  setHiddenFieldClass()\n  };\n\n  return (\n    <div className=\"App\">\n      <Container fluid className=\"app-background\">\n        <h1 className=\"app-title\">Baked Goods Price and Profit Calculator</h1>\n        <div className=\"add-budget-box\">\n          <h1 className=\"instructions\">\n            Follow the Steps Below to Calculate How Much You Need to Charge - Based on what YOU Deserve!\n          </h1>\n          <br/>\n        </div>\n      <div className={hiddenField}>\n        <div>\n            <h1>Type of Food: {item.itemName}</h1>\n            <h3>Customer Should Pay (pre discount): ${item.customerOwes}</h3>\n          </div>\n\t\t\t\t\t<div className=\"item-list text-dark\">\n            <div className=\"item-container \">\n              <ul class=\"list-group text-left\">\n                <li class=\"list-group-item\">Quantity: {item.quantity} </li>\n                <li class=\"list-group-item\">Base Cost per Good: ${item.price} </li>\n                <li class=\"list-group-item\">Material Cost per Good: ${item.materialCostPer}</li>\n                <li class=\"list-group-item\">Material Cost for Job: ${item.materialCost}</li>\n                <li class=\"list-group-item\">Profit per Good: ${item.profitPerGood}</li>\n                <li class=\"list-group-item\">Mileage Expenses: ${item.mileage}</li>\n                <li class=\"list-group-item\">Before Expenses You'll Make: ${item.preProfit}</li>\n                <li class=\"list-group-item\">After Expenses You'll Make: ${item.profit}</li>\n                <li class=\"list-group-item\">Pre Expenses Hourly Rate: ${item.preHourlyRate}</li>\n                <li class=\"list-group-item\">Post Expenses Hourly Rate: ${item.hourlyRate}</li>\n                <li class=\"list-group-item\">Discounted Price ${item.discount}</li>\n              </ul>\n            </div>\n          </div>\n          <Button\n            className=\"button-effects refresh-title\" \n            onClick={() => reloadWindow()}\n          >Start Over\n        </Button>\n        </div>\n        <div className={hiddenForm}>\n        <Card className=\"main-container\"  style={{background: \"lightblue\"}}>\n          <Form className=\"add-item-form\">\n            <DropdownButton alignRight title=\"Select Type of Baked Good\" id=\"dropdown-menu-align-right\" onSelect={handleSelectGood}>\n              <Dropdown.Item eventKey=\"wedding-cake1\">Wedding Cake - 1 Tier</Dropdown.Item>\n              <Dropdown.Item eventKey=\"wedding-cake2\">Wedding Cake - 2 Tier</Dropdown.Item>\n              <Dropdown.Item eventKey=\"wedding-cake3\">Wedding Cake - 3 Tier</Dropdown.Item>\n              <Dropdown.Item eventKey=\"bday-cake\">Brithday Cake</Dropdown.Item>\n              <Dropdown.Item eventKey=\"cookie\">Cookie</Dropdown.Item>\n              <Dropdown.Item eventKey=\"pie\">Pie</Dropdown.Item>\n              <Dropdown.Item eventKey=\"cupcake\">Cupcake</Dropdown.Item>\n              <Dropdown.Item eventKey=\"small-pastry\">Small Pastry</Dropdown.Item>\n              <Dropdown.Item eventKey=\"large-pastry\">Large Pastry</Dropdown.Item>\n            </DropdownButton>\n            <br/>\n            <h5>{resolvedName}</h5>\n            <Form.Group className=\"mb-1\" controlId=\"formEnterItem\">\n              {/* <Form.Label className=\"text-dark\">Quantity of Baked Good</Form.Label> */}\n              <Form.Control\n                type=\"input\"\n                placeholder=\"Type the quantity of baked good\"\n                value={quantityInputValue}\n                onChange={(e) => setQuantityValue(e.target.value)}\n                className=\"add-item-input\"\n              />\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"formEnterHours\">\n              <Form.Label className=\"text-dark\">How Many Hours did it Take?</Form.Label>\n              <Form.Control\n                type=\"input\"\n                placeholder=\"Enter hours spent\"\n                value={hoursInputValue}\n                onChange={(e) => setHoursInputValue(e.target.value)}\n                className=\"add-price-input\"\n              />\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"formEnterMiles\">\n              <Form.Label className=\"text-dark\">How Many Miles are You Driving to and From Delivery?</Form.Label>\n              <Form.Control\n                type=\"input\"\n                placeholder=\"Enter Miles Driven ($1 per mile)\"\n                value={milesInputValue}\n                onChange={(e) => setMilesInputValue(e.target.value)}\n                className=\"add-price-input\"\n              />\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"formEnterMaterialCost\">\n              <Form.Label className=\"text-dark\">Total Cost of Materials</Form.Label>\n              <Form.Control\n                type=\"input\"\n                placeholder=\"Enter material cost\"\n                value={materialCostInputValue}\n                onChange={(e) => setMaterialCostInputValue(e.target.value)}\n                className=\"add-price-input\"\n              />\n            </Form.Group>\n            <DropdownButton alignRight title=\"Apply Discount?\" id=\"dropdown-menu-align-right\" onSelect={handleSelectDiscount}>\n              <Dropdown.Item eventKey=\"yes\">yes</Dropdown.Item>\n              <Dropdown.Item eventKey=\"no\">no</Dropdown.Item>\n            </DropdownButton>\n            <h5>Discount: {discountValue}</h5>\n            <br/>\n            <Button\n            className=\"button-effects calculate_button\"\n            onClick={() => handleNewCalculationClick()}\n          >Calculate</Button>\n          </Form>\n        </Card>\n        </div>\n      </Container>\n    </div>\n  );\n};  \n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}